{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","XO","fieldToe","Array","fill","gameIsFinish","totalCombination","text","event","target","dataset","squares","innerText","setState","result","foundWiner","combination","i","length","_this2","react_default","a","createElement","id","onClick","element","clicked","className","data-squares","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dda6ef57.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state={\n      XO:'X',     \n      fieldToe:Array(9).fill(' '),\n      gameIsFinish:false,\n      totalCombination:1,     \n      text: ' ',\n    }\n  }\n  \n  clicked(event){\n\n    if(this.state.gameIsFinish){ \n      return true;\n   }\n\n   if(this.state.fieldToe[event.target.dataset.squares]===' '){\n      this.state.fieldToe[event.target.dataset.squares]=this.state.XO;\n      event.target.innerText=this.state.XO;\n      this.setState({\n        XO:this.state.XO==='X'?'O':'X',  \n        fieldToe:this.state.fieldToe,\n        totalCombination:this.state.totalCombination+1\n      });  \n\n      const result =this.foundWiner();\n      \n      if(result==='X'){        \n        this.setState({\n          text:'Winner is X',\n          gameIsFinish:true,\n        }) \n\n      } else \n      if(result==='O'){         \n        this.setState({      \n          text:'Winner is O',\n        gameIsFinish:true,\n        })\n      }else\n      if(this.state.totalCombination===9){         \n        this.setState({ \n          text:'DRAW',\n          gameIsFinish:true,\n        })\n      } \n    }\n  }\n  foundWiner(){ \n    let combination=[\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n    ];\n    let fieldToe=this.state.fieldToe;\n    for (let i = 0; i < combination.length; i++) {      \n      if (fieldToe[combination[i][0]]===fieldToe[combination[i][1]]\n        &&fieldToe[combination[i][0]]===fieldToe[combination[i][2]])\n      { \n        return fieldToe[combination[i][0]];\n      } \n    }    \n  }\n  render() {  \n    return (\n    <div id=\"game\">\n      <div id=\"head\">\n          TIC TAC TOE\n      </div>\n      <div id=\"box\" \n          onClick={(element)=>this.clicked(element)}\n      >       \n        <div className=\"square\" data-squares=\"0\"></div>     \n        <div className=\"square\" data-squares=\"1\"></div>\n        <div className=\"square\" data-squares=\"2\"></div>\n        <div className=\"square\" data-squares=\"3\"></div>\n        <div className=\"square\" data-squares=\"4\"></div>\n        <div className=\"square\" data-squares=\"5\"></div>\n        <div className=\"square\" data-squares=\"6\"></div>\n        <div className=\"square\" data-squares=\"7\"></div>\n        <div className=\"square\" data-squares=\"8\"></div>\n      </div>\n      <div id=\"winner\">{this.state.text}</div>\n    </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}